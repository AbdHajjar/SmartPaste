name: Build and Publish Python Library

on:
  push:
    tags:
      - 'v*'
    paths:
      - 'python-lib/**'
      - 'smartpaste/**'
      - '.github/workflows/python-lib.yml'
  pull_request:
    paths:
      - 'python-lib/**'
      - 'smartpaste/**'
  workflow_dispatch:

jobs:
  test:
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov black mypy flake8
        pip install -e python-lib[dev]
        
    - name: Run linting
      run: |
        black --check python-lib/ smartpaste/
        flake8 python-lib/ smartpaste/
        mypy python-lib/smartpaste_lib/ --ignore-missing-imports
        
    - name: Run tests
      run: |
        pytest tests/ --cov=smartpaste --cov=smartpaste_lib --cov-report=xml
        
    - name: Upload coverage
      if: matrix.python-version == '3.11' && matrix.os == 'ubuntu-latest'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        
  test-install:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Test installation
      run: |
        cd python-lib
        python -m pip install --upgrade pip build
        python -m build
        pip install dist/*.whl
        
    - name: Test CLI
      run: |
        smartpaste-core --help
        smartpaste info --list-handlers
        
    - name: Test API
      run: |
        python -c "
        import smartpaste_lib
        print('Version:', smartpaste_lib.__version__)
        
        # Test basic functionality
        result = smartpaste_lib.process_content('https://example.com')
        print('Processed URL:', result.get('detected_types', []))
        
        result = smartpaste_lib.process_content('25Â°C')
        print('Processed number:', result.get('detected_types', []))
        "
        
  build:
    needs: [test, test-install]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip build twine
        
    - name: Build package
      working-directory: python-lib
      run: |
        python -m build
        
    - name: Check package
      working-directory: python-lib
      run: |
        twine check dist/*
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: python-package
        path: python-lib/dist/
        
  publish-test-pypi:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: test-pypi
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        repository-url: https://test.pypi.org/legacy/
        
    - name: Test installation from Test PyPI
      run: |
        sleep 60  # Wait for package to be available
        pip install --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple/ \
          smartpaste-lib
          
        python -c "import smartpaste_lib; print('Test PyPI install successful')"
        
  publish-pypi:
    needs: [build, publish-test-pypi]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    environment: pypi
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        
  release:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: python-package
        path: dist/
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        name: SmartPaste Python Library ${{ github.ref_name }}
        draft: false
        prerelease: false
        generate_release_notes: true
        body: |
          ## SmartPaste Python Library ${{ github.ref_name }}
          
          ### Installation
          ```bash
          pip install smartpaste-lib
          ```
          
          ### What's Changed
          See the full changelog and documentation at [PyPI](https://pypi.org/project/smartpaste-lib/).
          
          ### Quick Start
          ```python
          import smartpaste_lib
          
          # Process any content
          result = smartpaste_lib.process_content("https://example.com")
          print(result['enriched_content'])
          ```
        files: |
          dist/*.tar.gz
          dist/*.whl
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  update-conda:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Trigger conda-forge update
      run: |
        echo "Creating conda-forge feedstock update"
        # This would typically trigger a conda-forge bot
        # or submit a PR to conda-forge/smartpaste-lib-feedstock
        
  update-homebrew:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Update Homebrew formula
      run: |
        echo "Updating Homebrew formula for Python package"
        # This would update the Homebrew formula
        
  docker:
    needs: publish-pypi
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: python-lib/Dockerfile
        push: true
        tags: |
          smartpaste/smartpaste-lib:latest
          smartpaste/smartpaste-lib:${{ github.ref_name }}
        platforms: linux/amd64,linux/arm64