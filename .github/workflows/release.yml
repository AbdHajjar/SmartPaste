name: Comprehensive Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Extract version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Releasing version: $VERSION"
        
    - name: Validate version format
      run: |
        if [[ ! "${{ steps.version.outputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "Invalid version format. Expected: vX.Y.Z"
          exit 1
        fi
        
    - name: Check if tag exists
      run: |
        if git tag -l | grep -q "^${{ steps.version.outputs.version }}$"; then
          echo "Tag already exists"
        else
          echo "New tag: ${{ steps.version.outputs.version }}"
        fi
        
  build-all:
    needs: validate-release
    strategy:
      matrix:
        platform: [desktop, mobile, python-lib]
        
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Trigger platform build
      uses: ./.github/workflows/${{ matrix.platform }}.yml
      with:
        version: ${{ needs.validate-release.outputs.version }}
        
  create-release:
    needs: [validate-release, build-all]
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s" ${LAST_TAG}..HEAD)
        else
          CHANGELOG=$(git log --pretty=format:"- %s")
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        name: SmartPaste ${{ needs.validate-release.outputs.version }}
        draft: false
        prerelease: ${{ contains(needs.validate-release.outputs.version, '-') }}
        generate_release_notes: true
        body: |
          # SmartPaste ${{ needs.validate-release.outputs.version }}
          
          ## 🚀 Multi-Platform Release
          
          SmartPaste is now available across all platforms:
          
          ### 📱 Desktop App
          - **Windows**: Download from [Microsoft Store](https://apps.microsoft.com/store/detail/smartpaste) or [direct download](https://github.com/smartpaste/smartpaste/releases/latest/download/smartpaste-win32-x64.exe)
          - **macOS**: Download from [Mac App Store](https://apps.apple.com/app/smartpaste) or [direct download](https://github.com/smartpaste/smartpaste/releases/latest/download/smartpaste-darwin-x64.dmg)
          - **Linux**: Download [AppImage](https://github.com/smartpaste/smartpaste/releases/latest/download/smartpaste-linux-x64.AppImage) or install via package manager
          
          ### 📱 Mobile Apps
          - **iOS**: Download from [App Store](https://apps.apple.com/app/smartpaste)
          - **Android**: Download from [Google Play](https://play.google.com/store/apps/details?id=com.smartpaste.app) or [direct APK](https://github.com/smartpaste/smartpaste/releases/latest/download/smartpaste.apk)
          
          ### 🐍 Python Library
          ```bash
          pip install smartpaste-lib
          ```
          
          ## ✨ What's New
          
          ${{ steps.changelog.outputs.changelog }}
          
          ## 🔗 Quick Start
          
          ### Desktop
          1. Download and install the desktop app
          2. SmartPaste will start monitoring your clipboard automatically
          3. Copy any URL, text, or number to see intelligent enhancements
          
          ### Mobile
          1. Install the mobile app
          2. Enable clipboard monitoring in settings
          3. Use share extensions to process content from any app
          
          ### Python Library
          ```python
          import smartpaste_lib
          
          # Process any content
          result = smartpaste_lib.process_content("https://example.com")
          print(result['enriched_content'])
          
          # Process clipboard
          result = smartpaste_lib.process_clipboard()
          ```
          
          ## 🔄 Cross-Platform Sync
          
          Enable sync in settings to share clipboard history and preferences across all your devices:
          - **Cloud Sync**: Automatic synchronization via Firebase
          - **Local Network**: Fast sync between devices on the same network
          - **End-to-End Encryption**: Your data stays private
          
          ## 📖 Documentation
          
          - [User Guide](https://smartpaste.ai/docs)
          - [API Documentation](https://smartpaste.ai/api)
          - [Developer Guide](https://github.com/smartpaste/smartpaste/blob/main/CONTRIBUTING.md)
          
          ## 🐛 Bug Reports
          
          Found an issue? Please report it on our [GitHub Issues](https://github.com/smartpaste/smartpaste/issues) page.
          
          ## 💬 Community
          
          - [Discord](https://discord.gg/smartpaste)
          - [Reddit](https://reddit.com/r/smartpaste)
          - [Twitter](https://twitter.com/smartpaste_app)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  notify-release:
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Notify Discord
      uses: sarisia/actions-status-discord@v1
      with:
        webhook: ${{ secrets.DISCORD_WEBHOOK }}
        title: "🎉 SmartPaste ${{ needs.validate-release.outputs.version }} Released!"
        description: |
          New version available across all platforms:
          • Desktop: Windows, macOS, Linux
          • Mobile: iOS, Android
          • Python: PyPI package
          
          [Download Now](https://github.com/smartpaste/smartpaste/releases/latest)
        color: 0x00ff00
        
    - name: Notify Twitter
      uses: ethomson/send-tweet-action@v1
      with:
        status: |
          🚀 SmartPaste ${{ needs.validate-release.outputs.version }} is now available!
          
          ✨ Cross-platform clipboard intelligence
          📱 Desktop, Mobile & Python Library
          🔄 Real-time sync across devices
          🔒 End-to-end encryption
          
          Download: https://github.com/smartpaste/smartpaste/releases/latest
          
          #SmartPaste #Productivity #OpenSource
        consumer-key: ${{ secrets.TWITTER_CONSUMER_KEY }}
        consumer-secret: ${{ secrets.TWITTER_CONSUMER_SECRET }}
        access-token: ${{ secrets.TWITTER_ACCESS_TOKEN }}
        access-token-secret: ${{ secrets.TWITTER_ACCESS_TOKEN_SECRET }}
        
    - name: Update website
      run: |
        # Trigger website update with new release info
        curl -X POST \
          -H "Authorization: token ${{ secrets.WEBSITE_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/smartpaste/website/dispatches \
          -d '{"event_type":"new_release","client_payload":{"version":"${{ needs.validate-release.outputs.version }}"}}'
          
  update-package-managers:
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    
    steps:
    - name: Update Homebrew
      run: |
        echo "Triggering Homebrew formula update"
        # This would be handled by the desktop workflow
        
    - name: Update Winget
      run: |
        echo "Triggering Winget package update" 
        # This would be handled by the desktop workflow
        
    - name: Update Snap Store
      run: |
        echo "Triggering Snap Store update"
        # This would be handled by the desktop workflow
        
    - name: Update conda-forge
      run: |
        echo "Triggering conda-forge update"
        # This would be handled by the python-lib workflow
        
  post-release-cleanup:
    needs: [validate-release, notify-release, update-package-managers]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Clean up artifacts
      run: |
        echo "Cleaning up temporary artifacts"
        
    - name: Update documentation
      run: |
        echo "Updating documentation with new version"
        
    - name: Archive logs
      run: |
        echo "Archiving release logs"
        
    - name: Release summary
      run: |
        echo "# Release Summary" > release-summary.md
        echo "" >> release-summary.md
        echo "Version: ${{ needs.validate-release.outputs.version }}" >> release-summary.md
        echo "Released at: $(date)" >> release-summary.md
        echo "Platforms: Desktop, Mobile, Python Library" >> release-summary.md
        echo "Status: ${{ job.status }}" >> release-summary.md
        
    - name: Upload release summary
      uses: actions/upload-artifact@v3
      with:
        name: release-summary
        path: release-summary.md